<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="518" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="501.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="501.00"> </text><svg id="frames" x="10" width="1180" total_samples="12645"><g><title>App-c0aa541ba61d87cb`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.04%)</title><rect x="0.4824%" y="197" width="0.0395%" height="15" fill="rgb(227,0,7)" fg:x="61" fg:w="5"/><text x="0.7324%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (4 samples, 0.03%)</title><rect x="0.4903%" y="181" width="0.0316%" height="15" fill="rgb(217,0,24)" fg:x="62" fg:w="4"/><text x="0.7403%" y="191.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::board2::ChessMoveList::moves_vec (9 samples, 0.07%)</title><rect x="0.5219%" y="197" width="0.0712%" height="15" fill="rgb(221,193,54)" fg:x="66" fg:w="9"/><text x="0.7719%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.05%)</title><rect x="0.5457%" y="181" width="0.0474%" height="15" fill="rgb(248,212,6)" fg:x="69" fg:w="6"/><text x="0.7957%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.03%)</title><rect x="0.5615%" y="165" width="0.0316%" height="15" fill="rgb(208,68,35)" fg:x="71" fg:w="4"/><text x="0.8115%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.03%)</title><rect x="0.5615%" y="149" width="0.0316%" height="15" fill="rgb(232,128,0)" fg:x="71" fg:w="4"/><text x="0.8115%" y="159.50"></text></g><g><title>App-c0aa541ba61d87cb`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.06%)</title><rect x="1.2811%" y="181" width="0.0554%" height="15" fill="rgb(207,160,47)" fg:x="162" fg:w="7"/><text x="1.5311%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (5 samples, 0.04%)</title><rect x="1.2970%" y="165" width="0.0395%" height="15" fill="rgb(228,23,34)" fg:x="164" fg:w="5"/><text x="1.5470%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.06%)</title><rect x="1.3998%" y="165" width="0.0554%" height="15" fill="rgb(218,30,26)" fg:x="177" fg:w="7"/><text x="1.6498%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.05%)</title><rect x="1.4077%" y="149" width="0.0474%" height="15" fill="rgb(220,122,19)" fg:x="178" fg:w="6"/><text x="1.6577%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.05%)</title><rect x="1.4077%" y="133" width="0.0474%" height="15" fill="rgb(250,228,42)" fg:x="178" fg:w="6"/><text x="1.6577%" y="143.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::board2::ChessMoveList::moves_vec (17 samples, 0.13%)</title><rect x="1.3365%" y="181" width="0.1344%" height="15" fill="rgb(240,193,28)" fg:x="169" fg:w="17"/><text x="1.5865%" y="191.50"></text></g><g><title>App-c0aa541ba61d87cb`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (33 samples, 0.26%)</title><rect x="3.5983%" y="165" width="0.2610%" height="15" fill="rgb(216,20,37)" fg:x="455" fg:w="33"/><text x="3.8483%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (20 samples, 0.16%)</title><rect x="3.7011%" y="149" width="0.1582%" height="15" fill="rgb(206,188,39)" fg:x="468" fg:w="20"/><text x="3.9511%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="3.9383%" y="133" width="0.0237%" height="15" fill="rgb(217,207,13)" fg:x="498" fg:w="3"/><text x="4.1883%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (5 samples, 0.04%)</title><rect x="4.0174%" y="101" width="0.0395%" height="15" fill="rgb(231,73,38)" fg:x="508" fg:w="5"/><text x="4.2674%" y="111.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::board2::ChessMoveList::moves_vec (31 samples, 0.25%)</title><rect x="3.8592%" y="165" width="0.2452%" height="15" fill="rgb(225,20,46)" fg:x="488" fg:w="31"/><text x="4.1092%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (22 samples, 0.17%)</title><rect x="3.9304%" y="149" width="0.1740%" height="15" fill="rgb(210,31,41)" fg:x="497" fg:w="22"/><text x="4.1804%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (18 samples, 0.14%)</title><rect x="3.9620%" y="133" width="0.1423%" height="15" fill="rgb(221,200,47)" fg:x="501" fg:w="18"/><text x="4.2120%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (18 samples, 0.14%)</title><rect x="3.9620%" y="117" width="0.1423%" height="15" fill="rgb(226,26,5)" fg:x="501" fg:w="18"/><text x="4.2120%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.05%)</title><rect x="4.0569%" y="101" width="0.0474%" height="15" fill="rgb(249,33,26)" fg:x="513" fg:w="6"/><text x="4.3069%" y="111.50"></text></g><g><title>App-c0aa541ba61d87cb`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (107 samples, 0.85%)</title><rect x="8.4144%" y="149" width="0.8462%" height="15" fill="rgb(235,183,28)" fg:x="1064" fg:w="107"/><text x="8.6644%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (73 samples, 0.58%)</title><rect x="8.6833%" y="133" width="0.5773%" height="15" fill="rgb(221,5,38)" fg:x="1098" fg:w="73"/><text x="8.9333%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (6 samples, 0.05%)</title><rect x="9.7588%" y="85" width="0.0474%" height="15" fill="rgb(247,18,42)" fg:x="1234" fg:w="6"/><text x="10.0088%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (54 samples, 0.43%)</title><rect x="9.4899%" y="133" width="0.4270%" height="15" fill="rgb(241,131,45)" fg:x="1200" fg:w="54"/><text x="9.7399%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (47 samples, 0.37%)</title><rect x="9.5453%" y="117" width="0.3717%" height="15" fill="rgb(249,31,29)" fg:x="1207" fg:w="47"/><text x="9.7953%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (46 samples, 0.36%)</title><rect x="9.5532%" y="101" width="0.3638%" height="15" fill="rgb(225,111,53)" fg:x="1208" fg:w="46"/><text x="9.8032%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (14 samples, 0.11%)</title><rect x="9.8062%" y="85" width="0.1107%" height="15" fill="rgb(238,160,17)" fg:x="1240" fg:w="14"/><text x="10.0562%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (4 samples, 0.03%)</title><rect x="9.9170%" y="133" width="0.0316%" height="15" fill="rgb(214,148,48)" fg:x="1254" fg:w="4"/><text x="10.1670%" y="143.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::board2::ChessMoveList::moves_vec (88 samples, 0.70%)</title><rect x="9.2606%" y="149" width="0.6959%" height="15" fill="rgb(232,36,49)" fg:x="1171" fg:w="88"/><text x="9.5106%" y="159.50"></text></g><g><title>App-c0aa541ba61d87cb`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (240 samples, 1.90%)</title><rect x="14.5196%" y="133" width="1.8980%" height="15" fill="rgb(209,103,24)" fg:x="1836" fg:w="240"/><text x="14.7696%" y="143.50">A..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (158 samples, 1.25%)</title><rect x="15.1681%" y="117" width="1.2495%" height="15" fill="rgb(229,88,8)" fg:x="1918" fg:w="158"/><text x="15.4181%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (6 samples, 0.05%)</title><rect x="16.7576%" y="69" width="0.0474%" height="15" fill="rgb(213,181,19)" fg:x="2119" fg:w="6"/><text x="17.0076%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (35 samples, 0.28%)</title><rect x="16.5757%" y="117" width="0.2768%" height="15" fill="rgb(254,191,54)" fg:x="2096" fg:w="35"/><text x="16.8257%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (33 samples, 0.26%)</title><rect x="16.5915%" y="101" width="0.2610%" height="15" fill="rgb(241,83,37)" fg:x="2098" fg:w="33"/><text x="16.8415%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (30 samples, 0.24%)</title><rect x="16.6153%" y="85" width="0.2372%" height="15" fill="rgb(233,36,39)" fg:x="2101" fg:w="30"/><text x="16.8653%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.05%)</title><rect x="16.8051%" y="69" width="0.0474%" height="15" fill="rgb(226,3,54)" fg:x="2125" fg:w="6"/><text x="17.0551%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (4 samples, 0.03%)</title><rect x="16.8525%" y="117" width="0.0316%" height="15" fill="rgb(245,192,40)" fg:x="2131" fg:w="4"/><text x="17.1025%" y="127.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::board2::ChessMoveList::moves_vec (60 samples, 0.47%)</title><rect x="16.4176%" y="133" width="0.4745%" height="15" fill="rgb(238,167,29)" fg:x="2076" fg:w="60"/><text x="16.6676%" y="143.50"></text></g><g><title>App-c0aa541ba61d87cb`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (422 samples, 3.34%)</title><rect x="25.7651%" y="117" width="3.3373%" height="15" fill="rgb(232,182,51)" fg:x="3258" fg:w="422"/><text x="26.0151%" y="127.50">App..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (284 samples, 2.25%)</title><rect x="26.8565%" y="101" width="2.2459%" height="15" fill="rgb(231,60,39)" fg:x="3396" fg:w="284"/><text x="27.1065%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.07%)</title><rect x="29.5769%" y="85" width="0.0712%" height="15" fill="rgb(208,69,12)" fg:x="3740" fg:w="9"/><text x="29.8269%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (15 samples, 0.12%)</title><rect x="30.0514%" y="53" width="0.1186%" height="15" fill="rgb(235,93,37)" fg:x="3800" fg:w="15"/><text x="30.3014%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (86 samples, 0.68%)</title><rect x="29.6481%" y="85" width="0.6801%" height="15" fill="rgb(213,116,39)" fg:x="3749" fg:w="86"/><text x="29.8981%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (84 samples, 0.66%)</title><rect x="29.6639%" y="69" width="0.6643%" height="15" fill="rgb(222,207,29)" fg:x="3751" fg:w="84"/><text x="29.9139%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (20 samples, 0.16%)</title><rect x="30.1700%" y="53" width="0.1582%" height="15" fill="rgb(206,96,30)" fg:x="3815" fg:w="20"/><text x="30.4200%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (102 samples, 0.81%)</title><rect x="29.5295%" y="101" width="0.8066%" height="15" fill="rgb(218,138,4)" fg:x="3734" fg:w="102"/><text x="29.7795%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (6 samples, 0.05%)</title><rect x="30.3361%" y="101" width="0.0474%" height="15" fill="rgb(250,191,14)" fg:x="3836" fg:w="6"/><text x="30.5861%" y="111.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::board2::ChessMoveList::moves_vec (163 samples, 1.29%)</title><rect x="29.1024%" y="117" width="1.2890%" height="15" fill="rgb(239,60,40)" fg:x="3680" fg:w="163"/><text x="29.3524%" y="127.50"></text></g><g><title>App-c0aa541ba61d87cb`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (307 samples, 2.43%)</title><rect x="35.6030%" y="101" width="2.4278%" height="15" fill="rgb(206,27,48)" fg:x="4502" fg:w="307"/><text x="35.8530%" y="111.50">Ap..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (207 samples, 1.64%)</title><rect x="36.3938%" y="85" width="1.6370%" height="15" fill="rgb(225,35,8)" fg:x="4602" fg:w="207"/><text x="36.6438%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.03%)</title><rect x="38.2839%" y="69" width="0.0316%" height="15" fill="rgb(250,213,24)" fg:x="4841" fg:w="4"/><text x="38.5339%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (9 samples, 0.07%)</title><rect x="38.4816%" y="37" width="0.0712%" height="15" fill="rgb(247,123,22)" fg:x="4866" fg:w="9"/><text x="38.7316%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (42 samples, 0.33%)</title><rect x="38.3155%" y="69" width="0.3321%" height="15" fill="rgb(231,138,38)" fg:x="4845" fg:w="42"/><text x="38.5655%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (41 samples, 0.32%)</title><rect x="38.3234%" y="53" width="0.3242%" height="15" fill="rgb(231,145,46)" fg:x="4846" fg:w="41"/><text x="38.5734%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (12 samples, 0.09%)</title><rect x="38.5528%" y="37" width="0.0949%" height="15" fill="rgb(251,118,11)" fg:x="4875" fg:w="12"/><text x="38.8028%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (51 samples, 0.40%)</title><rect x="38.2523%" y="85" width="0.4033%" height="15" fill="rgb(217,147,25)" fg:x="4837" fg:w="51"/><text x="38.5023%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (4 samples, 0.03%)</title><rect x="38.6556%" y="85" width="0.0316%" height="15" fill="rgb(247,81,37)" fg:x="4888" fg:w="4"/><text x="38.9056%" y="95.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::board2::ChessMoveList::moves_vec (85 samples, 0.67%)</title><rect x="38.0308%" y="101" width="0.6722%" height="15" fill="rgb(209,12,38)" fg:x="4809" fg:w="85"/><text x="38.2808%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="38.6872%" y="85" width="0.0158%" height="15" fill="rgb(227,1,9)" fg:x="4892" fg:w="2"/><text x="38.9372%" y="95.50"></text></g><g><title>App-c0aa541ba61d87cb`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (668 samples, 5.28%)</title><rect x="42.3962%" y="85" width="5.2827%" height="15" fill="rgb(248,47,43)" fg:x="5361" fg:w="668"/><text x="42.6462%" y="95.50">App-c0..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (490 samples, 3.88%)</title><rect x="43.8039%" y="69" width="3.8750%" height="15" fill="rgb(221,10,30)" fg:x="5539" fg:w="490"/><text x="44.0539%" y="79.50">libs..</text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::attackers (15 samples, 0.12%)</title><rect x="47.6789%" y="85" width="0.1186%" height="15" fill="rgb(210,229,1)" fg:x="6029" fg:w="15"/><text x="47.9289%" y="95.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::attackers (66 samples, 0.52%)</title><rect x="49.0866%" y="69" width="0.5219%" height="15" fill="rgb(222,148,37)" fg:x="6207" fg:w="66"/><text x="49.3366%" y="79.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_bishop_moves (5 samples, 0.04%)</title><rect x="49.6085%" y="69" width="0.0395%" height="15" fill="rgb(234,67,33)" fg:x="6273" fg:w="5"/><text x="49.8585%" y="79.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_king_moves (135 samples, 1.07%)</title><rect x="49.6481%" y="69" width="1.0676%" height="15" fill="rgb(247,98,35)" fg:x="6278" fg:w="135"/><text x="49.8981%" y="79.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::attackers (94 samples, 0.74%)</title><rect x="49.9723%" y="53" width="0.7434%" height="15" fill="rgb(247,138,52)" fg:x="6319" fg:w="94"/><text x="50.2223%" y="63.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_knight_moves (3 samples, 0.02%)</title><rect x="50.7157%" y="69" width="0.0237%" height="15" fill="rgb(213,79,30)" fg:x="6413" fg:w="3"/><text x="50.9657%" y="79.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_bishop_moves (65 samples, 0.51%)</title><rect x="51.2693%" y="53" width="0.5140%" height="15" fill="rgb(246,177,23)" fg:x="6483" fg:w="65"/><text x="51.5193%" y="63.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_knight_moves (117 samples, 0.93%)</title><rect x="51.7833%" y="53" width="0.9253%" height="15" fill="rgb(230,62,27)" fg:x="6548" fg:w="117"/><text x="52.0333%" y="63.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_pawn_moves (282 samples, 2.23%)</title><rect x="52.7086%" y="53" width="2.2301%" height="15" fill="rgb(216,154,8)" fg:x="6665" fg:w="282"/><text x="52.9586%" y="63.50">A..</text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::generate_en_passant (2 samples, 0.02%)</title><rect x="54.9229%" y="37" width="0.0158%" height="15" fill="rgb(244,35,45)" fg:x="6945" fg:w="2"/><text x="55.1729%" y="47.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_queen_moves (52 samples, 0.41%)</title><rect x="54.9387%" y="53" width="0.4112%" height="15" fill="rgb(251,115,12)" fg:x="6947" fg:w="52"/><text x="55.1887%" y="63.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_moves (624 samples, 4.93%)</title><rect x="50.7394%" y="69" width="4.9348%" height="15" fill="rgb(240,54,50)" fg:x="6416" fg:w="624"/><text x="50.9894%" y="79.50">App-c0..</text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_rook_moves (41 samples, 0.32%)</title><rect x="55.3499%" y="53" width="0.3242%" height="15" fill="rgb(233,84,52)" fg:x="6999" fg:w="41"/><text x="55.5999%" y="63.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_pawn_moves (3 samples, 0.02%)</title><rect x="55.6742%" y="69" width="0.0237%" height="15" fill="rgb(207,117,47)" fg:x="7040" fg:w="3"/><text x="55.9242%" y="79.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_queen_moves (5 samples, 0.04%)</title><rect x="55.6979%" y="69" width="0.0395%" height="15" fill="rgb(249,43,39)" fg:x="7043" fg:w="5"/><text x="55.9479%" y="79.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_rook_moves (3 samples, 0.02%)</title><rect x="55.7374%" y="69" width="0.0237%" height="15" fill="rgb(209,38,44)" fg:x="7048" fg:w="3"/><text x="55.9874%" y="79.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::gen_moves_legal (1,120 samples, 8.86%)</title><rect x="47.7975%" y="85" width="8.8573%" height="15" fill="rgb(236,212,23)" fg:x="6044" fg:w="1120"/><text x="48.0475%" y="95.50">App-c0aa541ba..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (113 samples, 0.89%)</title><rect x="55.7612%" y="69" width="0.8936%" height="15" fill="rgb(242,79,21)" fg:x="7051" fg:w="113"/><text x="56.0112%" y="79.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_king_moves (186 samples, 1.47%)</title><rect x="56.6548%" y="85" width="1.4709%" height="15" fill="rgb(211,96,35)" fg:x="7164" fg:w="186"/><text x="56.9048%" y="95.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::attackers (125 samples, 0.99%)</title><rect x="57.1372%" y="69" width="0.9885%" height="15" fill="rgb(253,215,40)" fg:x="7225" fg:w="125"/><text x="57.3872%" y="79.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memcmp (23 samples, 0.18%)</title><rect x="58.1336%" y="85" width="0.1819%" height="15" fill="rgb(211,81,21)" fg:x="7351" fg:w="23"/><text x="58.3836%" y="95.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (2 samples, 0.02%)</title><rect x="58.3155%" y="85" width="0.0158%" height="15" fill="rgb(208,190,38)" fg:x="7374" fg:w="2"/><text x="58.5655%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (46 samples, 0.36%)</title><rect x="58.3314%" y="85" width="0.3638%" height="15" fill="rgb(235,213,38)" fg:x="7376" fg:w="46"/><text x="58.5814%" y="95.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::bot2::Bot2::search (2,534 samples, 20.04%)</title><rect x="38.7030%" y="101" width="20.0395%" height="15" fill="rgb(237,122,38)" fg:x="4894" fg:w="2534"/><text x="38.9530%" y="111.50">App-c0aa541ba61d87cb`App::game_..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (6 samples, 0.05%)</title><rect x="58.6951%" y="85" width="0.0474%" height="15" fill="rgb(244,218,35)" fg:x="7422" fg:w="6"/><text x="58.9451%" y="95.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::attackers (6 samples, 0.05%)</title><rect x="58.7426%" y="101" width="0.0474%" height="15" fill="rgb(240,68,47)" fg:x="7428" fg:w="6"/><text x="58.9926%" y="111.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::board_state_numbers (7 samples, 0.06%)</title><rect x="58.7900%" y="101" width="0.0554%" height="15" fill="rgb(210,16,53)" fg:x="7434" fg:w="7"/><text x="59.0400%" y="111.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::attackers (35 samples, 0.28%)</title><rect x="59.2883%" y="85" width="0.2768%" height="15" fill="rgb(235,124,12)" fg:x="7497" fg:w="35"/><text x="59.5383%" y="95.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_king_moves (61 samples, 0.48%)</title><rect x="59.5730%" y="85" width="0.4824%" height="15" fill="rgb(224,169,11)" fg:x="7533" fg:w="61"/><text x="59.8230%" y="95.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::attackers (40 samples, 0.32%)</title><rect x="59.7390%" y="69" width="0.3163%" height="15" fill="rgb(250,166,2)" fg:x="7554" fg:w="40"/><text x="59.9890%" y="79.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_bishop_moves (17 samples, 0.13%)</title><rect x="60.2689%" y="69" width="0.1344%" height="15" fill="rgb(242,216,29)" fg:x="7621" fg:w="17"/><text x="60.5189%" y="79.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_knight_moves (35 samples, 0.28%)</title><rect x="60.4033%" y="69" width="0.2768%" height="15" fill="rgb(230,116,27)" fg:x="7638" fg:w="35"/><text x="60.6533%" y="79.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_pawn_moves (79 samples, 0.62%)</title><rect x="60.6801%" y="69" width="0.6248%" height="15" fill="rgb(228,99,48)" fg:x="7673" fg:w="79"/><text x="60.9301%" y="79.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_queen_moves (21 samples, 0.17%)</title><rect x="61.3049%" y="69" width="0.1661%" height="15" fill="rgb(253,11,6)" fg:x="7752" fg:w="21"/><text x="61.5549%" y="79.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_moves (188 samples, 1.49%)</title><rect x="60.0554%" y="85" width="1.4868%" height="15" fill="rgb(247,143,39)" fg:x="7594" fg:w="188"/><text x="60.3054%" y="95.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_rook_moves (9 samples, 0.07%)</title><rect x="61.4709%" y="69" width="0.0712%" height="15" fill="rgb(236,97,10)" fg:x="7773" fg:w="9"/><text x="61.7209%" y="79.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::gen_moves_legal (378 samples, 2.99%)</title><rect x="58.8454%" y="101" width="2.9893%" height="15" fill="rgb(233,208,19)" fg:x="7441" fg:w="378"/><text x="59.0954%" y="111.50">App..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (36 samples, 0.28%)</title><rect x="61.5500%" y="85" width="0.2847%" height="15" fill="rgb(216,164,2)" fg:x="7783" fg:w="36"/><text x="61.8000%" y="95.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_king_moves (155 samples, 1.23%)</title><rect x="61.8347%" y="101" width="1.2258%" height="15" fill="rgb(220,129,5)" fg:x="7819" fg:w="155"/><text x="62.0847%" y="111.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::attackers (101 samples, 0.80%)</title><rect x="62.2618%" y="85" width="0.7987%" height="15" fill="rgb(242,17,10)" fg:x="7873" fg:w="101"/><text x="62.5118%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (97 samples, 0.77%)</title><rect x="65.2274%" y="85" width="0.7671%" height="15" fill="rgb(242,107,0)" fg:x="8248" fg:w="97"/><text x="65.4774%" y="95.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::perform_move (411 samples, 3.25%)</title><rect x="63.0605%" y="101" width="3.2503%" height="15" fill="rgb(251,28,31)" fg:x="7974" fg:w="411"/><text x="63.3105%" y="111.50">App..</text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16$VARIANT$Haswell (40 samples, 0.32%)</title><rect x="65.9945%" y="85" width="0.3163%" height="15" fill="rgb(233,223,10)" fg:x="8345" fg:w="40"/><text x="66.2445%" y="95.50"></text></g><g><title>App-c0aa541ba61d87cb`DYLD-STUB$$__bzero (2 samples, 0.02%)</title><rect x="66.3108%" y="101" width="0.0158%" height="15" fill="rgb(215,21,27)" fg:x="8385" fg:w="2"/><text x="66.5608%" y="111.50"></text></g><g><title>App-c0aa541ba61d87cb`core::slice::sort::insertion_sort_shift_left (53 samples, 0.42%)</title><rect x="66.3345%" y="101" width="0.4191%" height="15" fill="rgb(232,23,21)" fg:x="8388" fg:w="53"/><text x="66.5845%" y="111.50"></text></g><g><title>App-c0aa541ba61d87cb`core::slice::sort::insertion_sort_shift_left (13 samples, 0.10%)</title><rect x="66.9197%" y="85" width="0.1028%" height="15" fill="rgb(244,5,23)" fg:x="8462" fg:w="13"/><text x="67.1697%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="67.0225%" y="85" width="0.0237%" height="15" fill="rgb(226,81,46)" fg:x="8475" fg:w="3"/><text x="67.2725%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="67.0225%" y="69" width="0.0237%" height="15" fill="rgb(247,70,30)" fg:x="8475" fg:w="3"/><text x="67.2725%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="67.0225%" y="53" width="0.0237%" height="15" fill="rgb(212,68,19)" fg:x="8475" fg:w="3"/><text x="67.2725%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.02%)</title><rect x="67.0542%" y="85" width="0.0237%" height="15" fill="rgb(240,187,13)" fg:x="8479" fg:w="3"/><text x="67.3042%" y="95.50"></text></g><g><title>App-c0aa541ba61d87cb`core::slice::sort::merge_sort (43 samples, 0.34%)</title><rect x="66.7537%" y="101" width="0.3401%" height="15" fill="rgb(223,113,26)" fg:x="8441" fg:w="43"/><text x="67.0037%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.02%)</title><rect x="67.0779%" y="85" width="0.0158%" height="15" fill="rgb(206,192,2)" fg:x="8482" fg:w="2"/><text x="67.3279%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.03%)</title><rect x="67.3072%" y="69" width="0.0316%" height="15" fill="rgb(241,108,4)" fg:x="8511" fg:w="4"/><text x="67.5572%" y="79.50"></text></g><g><title>App-c0aa541ba61d87cb`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (78 samples, 0.62%)</title><rect x="67.0937%" y="101" width="0.6168%" height="15" fill="rgb(247,173,49)" fg:x="8484" fg:w="78"/><text x="67.3437%" y="111.50"></text></g><g><title>App-c0aa541ba61d87cb`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (60 samples, 0.47%)</title><rect x="67.2361%" y="85" width="0.4745%" height="15" fill="rgb(224,114,35)" fg:x="8502" fg:w="60"/><text x="67.4861%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (47 samples, 0.37%)</title><rect x="67.3389%" y="69" width="0.3717%" height="15" fill="rgb(245,159,27)" fg:x="8515" fg:w="47"/><text x="67.5889%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (5 samples, 0.04%)</title><rect x="67.7422%" y="85" width="0.0395%" height="15" fill="rgb(245,172,44)" fg:x="8566" fg:w="5"/><text x="67.9922%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (13 samples, 0.10%)</title><rect x="67.7185%" y="101" width="0.1028%" height="15" fill="rgb(236,23,11)" fg:x="8563" fg:w="13"/><text x="67.9685%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (5 samples, 0.04%)</title><rect x="67.7817%" y="85" width="0.0395%" height="15" fill="rgb(205,117,38)" fg:x="8571" fg:w="5"/><text x="68.0317%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (5 samples, 0.04%)</title><rect x="67.7817%" y="69" width="0.0395%" height="15" fill="rgb(237,72,25)" fg:x="8571" fg:w="5"/><text x="68.0317%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (35 samples, 0.28%)</title><rect x="67.8213%" y="101" width="0.2768%" height="15" fill="rgb(244,70,9)" fg:x="8576" fg:w="35"/><text x="68.0713%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (19 samples, 0.15%)</title><rect x="67.9478%" y="85" width="0.1503%" height="15" fill="rgb(217,125,39)" fg:x="8592" fg:w="19"/><text x="68.1978%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.02%)</title><rect x="68.0822%" y="69" width="0.0158%" height="15" fill="rgb(235,36,10)" fg:x="8609" fg:w="2"/><text x="68.3322%" y="79.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memcmp (9 samples, 0.07%)</title><rect x="68.1218%" y="101" width="0.0712%" height="15" fill="rgb(251,123,47)" fg:x="8614" fg:w="9"/><text x="68.3718%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (56 samples, 0.44%)</title><rect x="68.2088%" y="101" width="0.4429%" height="15" fill="rgb(221,13,13)" fg:x="8625" fg:w="56"/><text x="68.4588%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.02%)</title><rect x="68.6516%" y="101" width="0.0237%" height="15" fill="rgb(238,131,9)" fg:x="8681" fg:w="3"/><text x="68.9016%" y="111.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::bot2::Bot2::search (4,845 samples, 38.32%)</title><rect x="30.3915%" y="117" width="38.3155%" height="15" fill="rgb(211,50,8)" fg:x="3843" fg:w="4845"/><text x="30.6415%" y="127.50">App-c0aa541ba61d87cb`App::game_manager::bot2::Bot2::search</text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16$VARIANT$Haswell (4 samples, 0.03%)</title><rect x="68.6754%" y="101" width="0.0316%" height="15" fill="rgb(245,182,24)" fg:x="8684" fg:w="4"/><text x="68.9254%" y="111.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::attackers (14 samples, 0.11%)</title><rect x="68.7070%" y="117" width="0.1107%" height="15" fill="rgb(242,14,37)" fg:x="8688" fg:w="14"/><text x="68.9570%" y="127.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::board_state_numbers (6 samples, 0.05%)</title><rect x="68.8177%" y="117" width="0.0474%" height="15" fill="rgb(246,228,12)" fg:x="8702" fg:w="6"/><text x="69.0677%" y="127.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::attackers (49 samples, 0.39%)</title><rect x="69.9249%" y="101" width="0.3875%" height="15" fill="rgb(213,55,15)" fg:x="8842" fg:w="49"/><text x="70.1749%" y="111.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_king_moves (106 samples, 0.84%)</title><rect x="70.3124%" y="101" width="0.8383%" height="15" fill="rgb(209,9,3)" fg:x="8891" fg:w="106"/><text x="70.5624%" y="111.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::attackers (74 samples, 0.59%)</title><rect x="70.5654%" y="85" width="0.5852%" height="15" fill="rgb(230,59,30)" fg:x="8923" fg:w="74"/><text x="70.8154%" y="95.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_knight_moves (4 samples, 0.03%)</title><rect x="71.1507%" y="101" width="0.0316%" height="15" fill="rgb(209,121,21)" fg:x="8997" fg:w="4"/><text x="71.4007%" y="111.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::generate_en_passant (4 samples, 0.03%)</title><rect x="71.6014%" y="85" width="0.0316%" height="15" fill="rgb(220,109,13)" fg:x="9054" fg:w="4"/><text x="71.8514%" y="95.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_bishop_moves (37 samples, 0.29%)</title><rect x="71.6331%" y="85" width="0.2926%" height="15" fill="rgb(232,18,1)" fg:x="9058" fg:w="37"/><text x="71.8831%" y="95.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_knight_moves (87 samples, 0.69%)</title><rect x="71.9257%" y="85" width="0.6880%" height="15" fill="rgb(215,41,42)" fg:x="9095" fg:w="87"/><text x="72.1757%" y="95.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_pawn_moves (244 samples, 1.93%)</title><rect x="72.6137%" y="85" width="1.9296%" height="15" fill="rgb(224,123,36)" fg:x="9182" fg:w="244"/><text x="72.8637%" y="95.50">A..</text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::generate_en_passant (5 samples, 0.04%)</title><rect x="74.5038%" y="69" width="0.0395%" height="15" fill="rgb(240,125,3)" fg:x="9421" fg:w="5"/><text x="74.7538%" y="79.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_queen_moves (39 samples, 0.31%)</title><rect x="74.5433%" y="85" width="0.3084%" height="15" fill="rgb(205,98,50)" fg:x="9426" fg:w="39"/><text x="74.7933%" y="95.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_moves (495 samples, 3.91%)</title><rect x="71.1823%" y="101" width="3.9146%" height="15" fill="rgb(205,185,37)" fg:x="9001" fg:w="495"/><text x="71.4323%" y="111.50">App-..</text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_rook_moves (31 samples, 0.25%)</title><rect x="74.8517%" y="85" width="0.2452%" height="15" fill="rgb(238,207,15)" fg:x="9465" fg:w="31"/><text x="75.1017%" y="95.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_pawn_moves (2 samples, 0.02%)</title><rect x="75.0969%" y="101" width="0.0158%" height="15" fill="rgb(213,199,42)" fg:x="9496" fg:w="2"/><text x="75.3469%" y="111.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_queen_moves (3 samples, 0.02%)</title><rect x="75.1127%" y="101" width="0.0237%" height="15" fill="rgb(235,201,11)" fg:x="9498" fg:w="3"/><text x="75.3627%" y="111.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::gen_moves_legal (881 samples, 6.97%)</title><rect x="68.8652%" y="117" width="6.9672%" height="15" fill="rgb(207,46,11)" fg:x="8708" fg:w="881"/><text x="69.1152%" y="127.50">App-c0aa5..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (87 samples, 0.69%)</title><rect x="75.1443%" y="101" width="0.6880%" height="15" fill="rgb(241,35,35)" fg:x="9502" fg:w="87"/><text x="75.3943%" y="111.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_king_moves (158 samples, 1.25%)</title><rect x="75.8323%" y="117" width="1.2495%" height="15" fill="rgb(243,32,47)" fg:x="9589" fg:w="158"/><text x="76.0823%" y="127.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::attackers (101 samples, 0.80%)</title><rect x="76.2831%" y="101" width="0.7987%" height="15" fill="rgb(247,202,23)" fg:x="9646" fg:w="101"/><text x="76.5331%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (55 samples, 0.43%)</title><rect x="78.1811%" y="101" width="0.4350%" height="15" fill="rgb(219,102,11)" fg:x="9886" fg:w="55"/><text x="78.4311%" y="111.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::perform_move (202 samples, 1.60%)</title><rect x="77.0898%" y="117" width="1.5975%" height="15" fill="rgb(243,110,44)" fg:x="9748" fg:w="202"/><text x="77.3398%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16$VARIANT$Haswell (9 samples, 0.07%)</title><rect x="78.6161%" y="101" width="0.0712%" height="15" fill="rgb(222,74,54)" fg:x="9941" fg:w="9"/><text x="78.8661%" y="111.50"></text></g><g><title>App-c0aa541ba61d87cb`DYLD-STUB$$memcmp (3 samples, 0.02%)</title><rect x="78.6872%" y="117" width="0.0237%" height="15" fill="rgb(216,99,12)" fg:x="9950" fg:w="3"/><text x="78.9372%" y="127.50"></text></g><g><title>App-c0aa541ba61d87cb`__rdl_alloc (2 samples, 0.02%)</title><rect x="78.7189%" y="117" width="0.0158%" height="15" fill="rgb(226,22,26)" fg:x="9954" fg:w="2"/><text x="78.9689%" y="127.50"></text></g><g><title>App-c0aa541ba61d87cb`core::slice::sort::insertion_sort_shift_left (79 samples, 0.62%)</title><rect x="78.7426%" y="117" width="0.6248%" height="15" fill="rgb(217,163,10)" fg:x="9957" fg:w="79"/><text x="78.9926%" y="127.50"></text></g><g><title>App-c0aa541ba61d87cb`core::slice::sort::insertion_sort_shift_left (10 samples, 0.08%)</title><rect x="79.5176%" y="101" width="0.0791%" height="15" fill="rgb(213,25,53)" fg:x="10055" fg:w="10"/><text x="79.7676%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.07%)</title><rect x="79.5967%" y="101" width="0.0712%" height="15" fill="rgb(252,105,26)" fg:x="10065" fg:w="9"/><text x="79.8467%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.07%)</title><rect x="79.5967%" y="85" width="0.0712%" height="15" fill="rgb(220,39,43)" fg:x="10065" fg:w="9"/><text x="79.8467%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.07%)</title><rect x="79.5967%" y="69" width="0.0712%" height="15" fill="rgb(229,68,48)" fg:x="10065" fg:w="9"/><text x="79.8467%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.02%)</title><rect x="79.6441%" y="53" width="0.0237%" height="15" fill="rgb(252,8,32)" fg:x="10071" fg:w="3"/><text x="79.8941%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.03%)</title><rect x="79.6758%" y="101" width="0.0316%" height="15" fill="rgb(223,20,43)" fg:x="10075" fg:w="4"/><text x="79.9258%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.02%)</title><rect x="79.6837%" y="85" width="0.0237%" height="15" fill="rgb(229,81,49)" fg:x="10076" fg:w="3"/><text x="79.9337%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.02%)</title><rect x="79.7074%" y="101" width="0.0158%" height="15" fill="rgb(236,28,36)" fg:x="10079" fg:w="2"/><text x="79.9574%" y="111.50"></text></g><g><title>App-c0aa541ba61d87cb`core::slice::sort::merge_sort (48 samples, 0.38%)</title><rect x="79.3673%" y="117" width="0.3796%" height="15" fill="rgb(249,185,26)" fg:x="10036" fg:w="48"/><text x="79.6173%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.02%)</title><rect x="79.7232%" y="101" width="0.0237%" height="15" fill="rgb(249,174,33)" fg:x="10081" fg:w="3"/><text x="79.9732%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.02%)</title><rect x="79.9130%" y="85" width="0.0158%" height="15" fill="rgb(233,201,37)" fg:x="10105" fg:w="2"/><text x="80.1630%" y="95.50"></text></g><g><title>App-c0aa541ba61d87cb`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (28 samples, 0.22%)</title><rect x="79.8735%" y="101" width="0.2214%" height="15" fill="rgb(221,78,26)" fg:x="10100" fg:w="28"/><text x="80.1235%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (21 samples, 0.17%)</title><rect x="79.9288%" y="85" width="0.1661%" height="15" fill="rgb(250,127,30)" fg:x="10107" fg:w="21"/><text x="80.1788%" y="95.50"></text></g><g><title>App-c0aa541ba61d87cb`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (54 samples, 0.43%)</title><rect x="79.7469%" y="117" width="0.4270%" height="15" fill="rgb(230,49,44)" fg:x="10084" fg:w="54"/><text x="79.9969%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (10 samples, 0.08%)</title><rect x="80.0949%" y="101" width="0.0791%" height="15" fill="rgb(229,67,23)" fg:x="10128" fg:w="10"/><text x="80.3449%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.02%)</title><rect x="80.2689%" y="101" width="0.0158%" height="15" fill="rgb(249,83,47)" fg:x="10150" fg:w="2"/><text x="80.5189%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.02%)</title><rect x="80.2847%" y="101" width="0.0237%" height="15" fill="rgb(215,43,3)" fg:x="10152" fg:w="3"/><text x="80.5347%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (39 samples, 0.31%)</title><rect x="80.1898%" y="117" width="0.3084%" height="15" fill="rgb(238,154,13)" fg:x="10140" fg:w="39"/><text x="80.4398%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (24 samples, 0.19%)</title><rect x="80.3084%" y="101" width="0.1898%" height="15" fill="rgb(219,56,2)" fg:x="10155" fg:w="24"/><text x="80.5584%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (22 samples, 0.17%)</title><rect x="80.3242%" y="85" width="0.1740%" height="15" fill="rgb(233,0,4)" fg:x="10157" fg:w="22"/><text x="80.5742%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (2 samples, 0.02%)</title><rect x="80.6643%" y="101" width="0.0158%" height="15" fill="rgb(235,30,7)" fg:x="10200" fg:w="2"/><text x="80.9143%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5 samples, 0.04%)</title><rect x="80.8778%" y="85" width="0.0395%" height="15" fill="rgb(250,79,13)" fg:x="10227" fg:w="5"/><text x="81.1278%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (59 samples, 0.47%)</title><rect x="80.4982%" y="117" width="0.4666%" height="15" fill="rgb(211,146,34)" fg:x="10179" fg:w="59"/><text x="80.7482%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (36 samples, 0.28%)</title><rect x="80.6801%" y="101" width="0.2847%" height="15" fill="rgb(228,22,38)" fg:x="10202" fg:w="36"/><text x="80.9301%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (6 samples, 0.05%)</title><rect x="80.9174%" y="85" width="0.0474%" height="15" fill="rgb(235,168,5)" fg:x="10232" fg:w="6"/><text x="81.1674%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.02%)</title><rect x="80.9727%" y="117" width="0.0158%" height="15" fill="rgb(221,155,16)" fg:x="10239" fg:w="2"/><text x="81.2227%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.02%)</title><rect x="80.9885%" y="117" width="0.0158%" height="15" fill="rgb(215,215,53)" fg:x="10241" fg:w="2"/><text x="81.2385%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.02%)</title><rect x="81.0043%" y="117" width="0.0158%" height="15" fill="rgb(223,4,10)" fg:x="10243" fg:w="2"/><text x="81.2543%" y="127.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memcmp (15 samples, 0.12%)</title><rect x="81.0360%" y="117" width="0.1186%" height="15" fill="rgb(234,103,6)" fg:x="10247" fg:w="15"/><text x="81.2860%" y="127.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (6 samples, 0.05%)</title><rect x="81.1546%" y="117" width="0.0474%" height="15" fill="rgb(227,97,0)" fg:x="10262" fg:w="6"/><text x="81.4046%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (2 samples, 0.02%)</title><rect x="81.2021%" y="117" width="0.0158%" height="15" fill="rgb(234,150,53)" fg:x="10268" fg:w="2"/><text x="81.4521%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (90 samples, 0.71%)</title><rect x="81.2179%" y="117" width="0.7117%" height="15" fill="rgb(228,201,54)" fg:x="10270" fg:w="90"/><text x="81.4679%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (7 samples, 0.06%)</title><rect x="81.9296%" y="117" width="0.0554%" height="15" fill="rgb(222,22,37)" fg:x="10360" fg:w="7"/><text x="82.1796%" y="127.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::bot2::Bot2::search (8,232 samples, 65.10%)</title><rect x="16.8921%" y="133" width="65.1008%" height="15" fill="rgb(237,53,32)" fg:x="2136" fg:w="8232"/><text x="17.1421%" y="143.50">App-c0aa541ba61d87cb`App::game_manager::bot2::Bot2::search</text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::attackers (7 samples, 0.06%)</title><rect x="81.9929%" y="133" width="0.0554%" height="15" fill="rgb(233,25,53)" fg:x="10368" fg:w="7"/><text x="82.2429%" y="143.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::board_state_numbers (7 samples, 0.06%)</title><rect x="82.0482%" y="133" width="0.0554%" height="15" fill="rgb(210,40,34)" fg:x="10375" fg:w="7"/><text x="82.2982%" y="143.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::attackers (32 samples, 0.25%)</title><rect x="82.4832%" y="117" width="0.2531%" height="15" fill="rgb(241,220,44)" fg:x="10430" fg:w="32"/><text x="82.7332%" y="127.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_bishop_moves (2 samples, 0.02%)</title><rect x="82.7363%" y="117" width="0.0158%" height="15" fill="rgb(235,28,35)" fg:x="10462" fg:w="2"/><text x="82.9863%" y="127.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_king_moves (44 samples, 0.35%)</title><rect x="82.7521%" y="117" width="0.3480%" height="15" fill="rgb(210,56,17)" fg:x="10464" fg:w="44"/><text x="83.0021%" y="127.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::attackers (29 samples, 0.23%)</title><rect x="82.8707%" y="101" width="0.2293%" height="15" fill="rgb(224,130,29)" fg:x="10479" fg:w="29"/><text x="83.1207%" y="111.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_bishop_moves (17 samples, 0.13%)</title><rect x="83.2582%" y="101" width="0.1344%" height="15" fill="rgb(235,212,8)" fg:x="10528" fg:w="17"/><text x="83.5082%" y="111.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_knight_moves (31 samples, 0.25%)</title><rect x="83.3926%" y="101" width="0.2452%" height="15" fill="rgb(223,33,50)" fg:x="10545" fg:w="31"/><text x="83.6426%" y="111.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_pawn_moves (48 samples, 0.38%)</title><rect x="83.6378%" y="101" width="0.3796%" height="15" fill="rgb(219,149,13)" fg:x="10576" fg:w="48"/><text x="83.8878%" y="111.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_queen_moves (5 samples, 0.04%)</title><rect x="84.0174%" y="101" width="0.0395%" height="15" fill="rgb(250,156,29)" fg:x="10624" fg:w="5"/><text x="84.2674%" y="111.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_moves (137 samples, 1.08%)</title><rect x="83.1000%" y="117" width="1.0834%" height="15" fill="rgb(216,193,19)" fg:x="10508" fg:w="137"/><text x="83.3500%" y="127.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_rook_moves (16 samples, 0.13%)</title><rect x="84.0569%" y="101" width="0.1265%" height="15" fill="rgb(216,135,14)" fg:x="10629" fg:w="16"/><text x="84.3069%" y="111.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::gen_moves_legal (288 samples, 2.28%)</title><rect x="82.1036%" y="133" width="2.2776%" height="15" fill="rgb(241,47,5)" fg:x="10382" fg:w="288"/><text x="82.3536%" y="143.50">A..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (22 samples, 0.17%)</title><rect x="84.2072%" y="117" width="0.1740%" height="15" fill="rgb(233,42,35)" fg:x="10648" fg:w="22"/><text x="84.4572%" y="127.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_king_moves (118 samples, 0.93%)</title><rect x="84.3812%" y="133" width="0.9332%" height="15" fill="rgb(231,13,6)" fg:x="10670" fg:w="118"/><text x="84.6312%" y="143.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::attackers (77 samples, 0.61%)</title><rect x="84.7054%" y="117" width="0.6089%" height="15" fill="rgb(207,181,40)" fg:x="10711" fg:w="77"/><text x="84.9554%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (71 samples, 0.56%)</title><rect x="86.8406%" y="117" width="0.5615%" height="15" fill="rgb(254,173,49)" fg:x="10981" fg:w="71"/><text x="87.0906%" y="127.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::perform_move (281 samples, 2.22%)</title><rect x="85.3144%" y="133" width="2.2222%" height="15" fill="rgb(221,1,38)" fg:x="10788" fg:w="281"/><text x="85.5644%" y="143.50">A..</text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16$VARIANT$Haswell (17 samples, 0.13%)</title><rect x="87.4021%" y="117" width="0.1344%" height="15" fill="rgb(206,124,46)" fg:x="11052" fg:w="17"/><text x="87.6521%" y="127.50"></text></g><g><title>App-c0aa541ba61d87cb`__rdl_alloc (2 samples, 0.02%)</title><rect x="87.5445%" y="133" width="0.0158%" height="15" fill="rgb(249,21,11)" fg:x="11070" fg:w="2"/><text x="87.7945%" y="143.50"></text></g><g><title>App-c0aa541ba61d87cb`core::slice::sort::insertion_sort_shift_left (54 samples, 0.43%)</title><rect x="87.5682%" y="133" width="0.4270%" height="15" fill="rgb(222,201,40)" fg:x="11073" fg:w="54"/><text x="87.8182%" y="143.50"></text></g><g><title>App-c0aa541ba61d87cb`core::slice::sort::insertion_sort_shift_left (19 samples, 0.15%)</title><rect x="88.2641%" y="117" width="0.1503%" height="15" fill="rgb(235,61,29)" fg:x="11161" fg:w="19"/><text x="88.5141%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.04%)</title><rect x="88.4144%" y="117" width="0.0395%" height="15" fill="rgb(219,207,3)" fg:x="11180" fg:w="5"/><text x="88.6644%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="88.4302%" y="101" width="0.0237%" height="15" fill="rgb(222,56,46)" fg:x="11182" fg:w="3"/><text x="88.6802%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="88.4302%" y="85" width="0.0237%" height="15" fill="rgb(239,76,54)" fg:x="11182" fg:w="3"/><text x="88.6802%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.02%)</title><rect x="88.4539%" y="117" width="0.0237%" height="15" fill="rgb(231,124,27)" fg:x="11185" fg:w="3"/><text x="88.7039%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.02%)</title><rect x="88.4618%" y="101" width="0.0158%" height="15" fill="rgb(249,195,6)" fg:x="11186" fg:w="2"/><text x="88.7118%" y="111.50"></text></g><g><title>App-c0aa541ba61d87cb`core::slice::sort::merge_sort (68 samples, 0.54%)</title><rect x="87.9953%" y="133" width="0.5378%" height="15" fill="rgb(237,174,47)" fg:x="11127" fg:w="68"/><text x="88.2453%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (6 samples, 0.05%)</title><rect x="88.4856%" y="117" width="0.0474%" height="15" fill="rgb(206,201,31)" fg:x="11189" fg:w="6"/><text x="88.7356%" y="127.50"></text></g><g><title>App-c0aa541ba61d87cb`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (32 samples, 0.25%)</title><rect x="88.5330%" y="133" width="0.2531%" height="15" fill="rgb(231,57,52)" fg:x="11195" fg:w="32"/><text x="88.7830%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (7 samples, 0.06%)</title><rect x="88.7307%" y="117" width="0.0554%" height="15" fill="rgb(248,177,22)" fg:x="11220" fg:w="7"/><text x="88.9807%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.02%)</title><rect x="88.7940%" y="133" width="0.0237%" height="15" fill="rgb(215,211,37)" fg:x="11228" fg:w="3"/><text x="89.0440%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.02%)</title><rect x="88.9284%" y="117" width="0.0158%" height="15" fill="rgb(241,128,51)" fg:x="11245" fg:w="2"/><text x="89.1784%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (22 samples, 0.17%)</title><rect x="88.8177%" y="133" width="0.1740%" height="15" fill="rgb(227,165,31)" fg:x="11231" fg:w="22"/><text x="89.0677%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (5 samples, 0.04%)</title><rect x="88.9522%" y="117" width="0.0395%" height="15" fill="rgb(228,167,24)" fg:x="11248" fg:w="5"/><text x="89.2022%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (5 samples, 0.04%)</title><rect x="88.9522%" y="101" width="0.0395%" height="15" fill="rgb(228,143,12)" fg:x="11248" fg:w="5"/><text x="89.2022%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (2 samples, 0.02%)</title><rect x="89.0629%" y="117" width="0.0158%" height="15" fill="rgb(249,149,8)" fg:x="11262" fg:w="2"/><text x="89.3129%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (28 samples, 0.22%)</title><rect x="88.9917%" y="133" width="0.2214%" height="15" fill="rgb(243,35,44)" fg:x="11253" fg:w="28"/><text x="89.2417%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (17 samples, 0.13%)</title><rect x="89.0787%" y="117" width="0.1344%" height="15" fill="rgb(246,89,9)" fg:x="11264" fg:w="17"/><text x="89.3287%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.02%)</title><rect x="89.2131%" y="133" width="0.0158%" height="15" fill="rgb(233,213,13)" fg:x="11281" fg:w="2"/><text x="89.4631%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (3 samples, 0.02%)</title><rect x="89.2289%" y="133" width="0.0237%" height="15" fill="rgb(233,141,41)" fg:x="11283" fg:w="3"/><text x="89.4789%" y="143.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$__bzero (2 samples, 0.02%)</title><rect x="89.2527%" y="133" width="0.0158%" height="15" fill="rgb(239,167,4)" fg:x="11286" fg:w="2"/><text x="89.5027%" y="143.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memcmp (14 samples, 0.11%)</title><rect x="89.2685%" y="133" width="0.1107%" height="15" fill="rgb(209,217,16)" fg:x="11288" fg:w="14"/><text x="89.5185%" y="143.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memset_pattern16 (2 samples, 0.02%)</title><rect x="89.3871%" y="133" width="0.0158%" height="15" fill="rgb(219,88,35)" fg:x="11303" fg:w="2"/><text x="89.6371%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (2 samples, 0.02%)</title><rect x="89.4029%" y="133" width="0.0158%" height="15" fill="rgb(220,193,23)" fg:x="11305" fg:w="2"/><text x="89.6529%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (48 samples, 0.38%)</title><rect x="89.4187%" y="133" width="0.3796%" height="15" fill="rgb(230,90,52)" fg:x="11307" fg:w="48"/><text x="89.6687%" y="143.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::bot2::Bot2::search (10,097 samples, 79.85%)</title><rect x="9.9565%" y="149" width="79.8497%" height="15" fill="rgb(252,106,19)" fg:x="1259" fg:w="10097"/><text x="10.2065%" y="159.50">App-c0aa541ba61d87cb`App::game_manager::bot2::Bot2::search</text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::attackers (4 samples, 0.03%)</title><rect x="89.8062%" y="149" width="0.0316%" height="15" fill="rgb(206,74,20)" fg:x="11356" fg:w="4"/><text x="90.0562%" y="159.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::board_state_numbers (5 samples, 0.04%)</title><rect x="89.8379%" y="149" width="0.0395%" height="15" fill="rgb(230,138,44)" fg:x="11360" fg:w="5"/><text x="90.0879%" y="159.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::attackers (14 samples, 0.11%)</title><rect x="90.0989%" y="133" width="0.1107%" height="15" fill="rgb(235,182,43)" fg:x="11393" fg:w="14"/><text x="90.3489%" y="143.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_king_moves (31 samples, 0.25%)</title><rect x="90.2096%" y="133" width="0.2452%" height="15" fill="rgb(242,16,51)" fg:x="11407" fg:w="31"/><text x="90.4596%" y="143.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::attackers (17 samples, 0.13%)</title><rect x="90.3203%" y="117" width="0.1344%" height="15" fill="rgb(248,9,4)" fg:x="11421" fg:w="17"/><text x="90.5703%" y="127.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_bishop_moves (18 samples, 0.14%)</title><rect x="90.6524%" y="117" width="0.1423%" height="15" fill="rgb(210,31,22)" fg:x="11463" fg:w="18"/><text x="90.9024%" y="127.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_knight_moves (34 samples, 0.27%)</title><rect x="90.7948%" y="117" width="0.2689%" height="15" fill="rgb(239,54,39)" fg:x="11481" fg:w="34"/><text x="91.0448%" y="127.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_pawn_moves (78 samples, 0.62%)</title><rect x="91.0637%" y="117" width="0.6168%" height="15" fill="rgb(230,99,41)" fg:x="11515" fg:w="78"/><text x="91.3137%" y="127.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::generate_en_passant (2 samples, 0.02%)</title><rect x="91.6647%" y="101" width="0.0158%" height="15" fill="rgb(253,106,12)" fg:x="11591" fg:w="2"/><text x="91.9147%" y="111.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_queen_moves (11 samples, 0.09%)</title><rect x="91.6805%" y="117" width="0.0870%" height="15" fill="rgb(213,46,41)" fg:x="11593" fg:w="11"/><text x="91.9305%" y="127.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_moves (174 samples, 1.38%)</title><rect x="90.4626%" y="133" width="1.3760%" height="15" fill="rgb(215,133,35)" fg:x="11439" fg:w="174"/><text x="90.7126%" y="143.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_rook_moves (9 samples, 0.07%)</title><rect x="91.7675%" y="117" width="0.0712%" height="15" fill="rgb(213,28,5)" fg:x="11604" fg:w="9"/><text x="92.0175%" y="127.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::gen_moves_legal (287 samples, 2.27%)</title><rect x="89.8774%" y="149" width="2.2697%" height="15" fill="rgb(215,77,49)" fg:x="11365" fg:w="287"/><text x="90.1274%" y="159.50">A..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (38 samples, 0.30%)</title><rect x="91.8466%" y="133" width="0.3005%" height="15" fill="rgb(248,100,22)" fg:x="11614" fg:w="38"/><text x="92.0966%" y="143.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_king_moves (49 samples, 0.39%)</title><rect x="92.1471%" y="149" width="0.3875%" height="15" fill="rgb(208,67,9)" fg:x="11652" fg:w="49"/><text x="92.3971%" y="159.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::attackers (29 samples, 0.23%)</title><rect x="92.3053%" y="133" width="0.2293%" height="15" fill="rgb(219,133,21)" fg:x="11672" fg:w="29"/><text x="92.5553%" y="143.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_moves (3 samples, 0.02%)</title><rect x="92.5346%" y="149" width="0.0237%" height="15" fill="rgb(246,46,29)" fg:x="11701" fg:w="3"/><text x="92.7846%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (41 samples, 0.32%)</title><rect x="93.3096%" y="133" width="0.3242%" height="15" fill="rgb(246,185,52)" fg:x="11799" fg:w="41"/><text x="93.5596%" y="143.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::perform_move (149 samples, 1.18%)</title><rect x="92.5583%" y="149" width="1.1783%" height="15" fill="rgb(252,136,11)" fg:x="11704" fg:w="149"/><text x="92.8083%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16$VARIANT$Haswell (13 samples, 0.10%)</title><rect x="93.6338%" y="133" width="0.1028%" height="15" fill="rgb(219,138,53)" fg:x="11840" fg:w="13"/><text x="93.8838%" y="143.50"></text></g><g><title>App-c0aa541ba61d87cb`core::slice::sort::insertion_sort_shift_left (60 samples, 0.47%)</title><rect x="93.7446%" y="149" width="0.4745%" height="15" fill="rgb(211,51,23)" fg:x="11854" fg:w="60"/><text x="93.9946%" y="159.50"></text></g><g><title>App-c0aa541ba61d87cb`core::slice::sort::insertion_sort_shift_left (4 samples, 0.03%)</title><rect x="94.3060%" y="133" width="0.0316%" height="15" fill="rgb(247,221,28)" fg:x="11925" fg:w="4"/><text x="94.5560%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="94.3377%" y="133" width="0.0158%" height="15" fill="rgb(251,222,45)" fg:x="11929" fg:w="2"/><text x="94.5877%" y="143.50"></text></g><g><title>App-c0aa541ba61d87cb`core::slice::sort::merge_sort (19 samples, 0.15%)</title><rect x="94.2191%" y="149" width="0.1503%" height="15" fill="rgb(217,162,53)" fg:x="11914" fg:w="19"/><text x="94.4691%" y="159.50"></text></g><g><title>App-c0aa541ba61d87cb`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (20 samples, 0.16%)</title><rect x="94.5038%" y="133" width="0.1582%" height="15" fill="rgb(229,93,14)" fg:x="11950" fg:w="20"/><text x="94.7538%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (15 samples, 0.12%)</title><rect x="94.5433%" y="117" width="0.1186%" height="15" fill="rgb(209,67,49)" fg:x="11955" fg:w="15"/><text x="94.7933%" y="127.50"></text></g><g><title>App-c0aa541ba61d87cb`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (41 samples, 0.32%)</title><rect x="94.3693%" y="149" width="0.3242%" height="15" fill="rgb(213,87,29)" fg:x="11933" fg:w="41"/><text x="94.6193%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (4 samples, 0.03%)</title><rect x="94.6619%" y="133" width="0.0316%" height="15" fill="rgb(205,151,52)" fg:x="11970" fg:w="4"/><text x="94.9119%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="94.6936%" y="149" width="0.0237%" height="15" fill="rgb(253,215,39)" fg:x="11974" fg:w="3"/><text x="94.9436%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.08%)</title><rect x="94.7173%" y="149" width="0.0791%" height="15" fill="rgb(221,220,41)" fg:x="11977" fg:w="10"/><text x="94.9673%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.02%)</title><rect x="94.7726%" y="133" width="0.0237%" height="15" fill="rgb(218,133,21)" fg:x="11984" fg:w="3"/><text x="95.0226%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.02%)</title><rect x="94.7805%" y="117" width="0.0158%" height="15" fill="rgb(221,193,43)" fg:x="11985" fg:w="2"/><text x="95.0305%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (36 samples, 0.28%)</title><rect x="94.7964%" y="149" width="0.2847%" height="15" fill="rgb(240,128,52)" fg:x="11987" fg:w="36"/><text x="95.0464%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (23 samples, 0.18%)</title><rect x="94.8992%" y="133" width="0.1819%" height="15" fill="rgb(253,114,12)" fg:x="12000" fg:w="23"/><text x="95.1492%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.03%)</title><rect x="95.0890%" y="149" width="0.0316%" height="15" fill="rgb(215,223,47)" fg:x="12024" fg:w="4"/><text x="95.3390%" y="159.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$__bzero (2 samples, 0.02%)</title><rect x="95.1285%" y="149" width="0.0158%" height="15" fill="rgb(248,225,23)" fg:x="12029" fg:w="2"/><text x="95.3785%" y="159.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memcmp (5 samples, 0.04%)</title><rect x="95.1443%" y="149" width="0.0395%" height="15" fill="rgb(250,108,0)" fg:x="12031" fg:w="5"/><text x="95.3943%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (53 samples, 0.42%)</title><rect x="95.1997%" y="149" width="0.4191%" height="15" fill="rgb(228,208,7)" fg:x="12038" fg:w="53"/><text x="95.4497%" y="159.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::bot2::Bot2::search (11,575 samples, 91.54%)</title><rect x="4.1044%" y="165" width="91.5382%" height="15" fill="rgb(244,45,10)" fg:x="519" fg:w="11575"/><text x="4.3544%" y="175.50">App-c0aa541ba61d87cb`App::game_manager::bot2::Bot2::search</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.02%)</title><rect x="95.6188%" y="149" width="0.0237%" height="15" fill="rgb(207,125,25)" fg:x="12091" fg:w="3"/><text x="95.8688%" y="159.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::attackers (4 samples, 0.03%)</title><rect x="95.6425%" y="165" width="0.0316%" height="15" fill="rgb(210,195,18)" fg:x="12094" fg:w="4"/><text x="95.8925%" y="175.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::attackers (12 samples, 0.09%)</title><rect x="95.7849%" y="149" width="0.0949%" height="15" fill="rgb(249,80,12)" fg:x="12112" fg:w="12"/><text x="96.0349%" y="159.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_king_moves (7 samples, 0.06%)</title><rect x="95.8798%" y="149" width="0.0554%" height="15" fill="rgb(221,65,9)" fg:x="12124" fg:w="7"/><text x="96.1298%" y="159.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::attackers (5 samples, 0.04%)</title><rect x="95.8956%" y="133" width="0.0395%" height="15" fill="rgb(235,49,36)" fg:x="12126" fg:w="5"/><text x="96.1456%" y="143.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_bishop_moves (3 samples, 0.02%)</title><rect x="95.9747%" y="133" width="0.0237%" height="15" fill="rgb(225,32,20)" fg:x="12136" fg:w="3"/><text x="96.2247%" y="143.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_knight_moves (13 samples, 0.10%)</title><rect x="95.9984%" y="133" width="0.1028%" height="15" fill="rgb(215,141,46)" fg:x="12139" fg:w="13"/><text x="96.2484%" y="143.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_pawn_moves (15 samples, 0.12%)</title><rect x="96.1012%" y="133" width="0.1186%" height="15" fill="rgb(250,160,47)" fg:x="12152" fg:w="15"/><text x="96.3512%" y="143.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_moves (40 samples, 0.32%)</title><rect x="95.9352%" y="149" width="0.3163%" height="15" fill="rgb(216,222,40)" fg:x="12131" fg:w="40"/><text x="96.1852%" y="159.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_queen_moves (4 samples, 0.03%)</title><rect x="96.2198%" y="133" width="0.0316%" height="15" fill="rgb(234,217,39)" fg:x="12167" fg:w="4"/><text x="96.4698%" y="143.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::gen_moves_legal (76 samples, 0.60%)</title><rect x="95.6742%" y="165" width="0.6010%" height="15" fill="rgb(207,178,40)" fg:x="12098" fg:w="76"/><text x="95.9242%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.02%)</title><rect x="96.2515%" y="149" width="0.0237%" height="15" fill="rgb(221,136,13)" fg:x="12171" fg:w="3"/><text x="96.5015%" y="159.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_king_moves (25 samples, 0.20%)</title><rect x="96.2752%" y="165" width="0.1977%" height="15" fill="rgb(249,199,10)" fg:x="12174" fg:w="25"/><text x="96.5252%" y="175.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::attackers (14 samples, 0.11%)</title><rect x="96.3622%" y="149" width="0.1107%" height="15" fill="rgb(249,222,13)" fg:x="12185" fg:w="14"/><text x="96.6122%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (17 samples, 0.13%)</title><rect x="96.9790%" y="149" width="0.1344%" height="15" fill="rgb(244,185,38)" fg:x="12263" fg:w="17"/><text x="97.2290%" y="159.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::perform_move (82 samples, 0.65%)</title><rect x="96.4729%" y="165" width="0.6485%" height="15" fill="rgb(236,202,9)" fg:x="12199" fg:w="82"/><text x="96.7229%" y="175.50"></text></g><g><title>App-c0aa541ba61d87cb`core::slice::sort::insertion_sort_shift_left (22 samples, 0.17%)</title><rect x="97.1372%" y="165" width="0.1740%" height="15" fill="rgb(250,229,37)" fg:x="12283" fg:w="22"/><text x="97.3872%" y="175.50"></text></g><g><title>App-c0aa541ba61d87cb`core::slice::sort::insertion_sort_shift_left (14 samples, 0.11%)</title><rect x="97.5326%" y="149" width="0.1107%" height="15" fill="rgb(206,174,23)" fg:x="12333" fg:w="14"/><text x="97.7826%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.13%)</title><rect x="97.6433%" y="149" width="0.1265%" height="15" fill="rgb(211,33,43)" fg:x="12347" fg:w="16"/><text x="97.8933%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.09%)</title><rect x="97.6750%" y="133" width="0.0949%" height="15" fill="rgb(245,58,50)" fg:x="12351" fg:w="12"/><text x="97.9250%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.08%)</title><rect x="97.6908%" y="117" width="0.0791%" height="15" fill="rgb(244,68,36)" fg:x="12353" fg:w="10"/><text x="97.9408%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.05%)</title><rect x="97.7224%" y="101" width="0.0474%" height="15" fill="rgb(232,229,15)" fg:x="12357" fg:w="6"/><text x="97.9724%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.03%)</title><rect x="97.7778%" y="149" width="0.0316%" height="15" fill="rgb(254,30,23)" fg:x="12364" fg:w="4"/><text x="98.0278%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.03%)</title><rect x="97.7778%" y="133" width="0.0316%" height="15" fill="rgb(235,160,14)" fg:x="12364" fg:w="4"/><text x="98.0278%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.02%)</title><rect x="97.8094%" y="149" width="0.0158%" height="15" fill="rgb(212,155,44)" fg:x="12368" fg:w="2"/><text x="98.0594%" y="159.50"></text></g><g><title>App-c0aa541ba61d87cb`core::slice::sort::merge_sort (66 samples, 0.52%)</title><rect x="97.3112%" y="165" width="0.5219%" height="15" fill="rgb(226,2,50)" fg:x="12305" fg:w="66"/><text x="97.5612%" y="175.50"></text></g><g><title>App-c0aa541ba61d87cb`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (17 samples, 0.13%)</title><rect x="97.8331%" y="165" width="0.1344%" height="15" fill="rgb(234,177,6)" fg:x="12371" fg:w="17"/><text x="98.0831%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (5 samples, 0.04%)</title><rect x="97.9280%" y="149" width="0.0395%" height="15" fill="rgb(217,24,9)" fg:x="12383" fg:w="5"/><text x="98.1780%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.02%)</title><rect x="98.0150%" y="149" width="0.0158%" height="15" fill="rgb(220,13,46)" fg:x="12394" fg:w="2"/><text x="98.2650%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.09%)</title><rect x="97.9676%" y="165" width="0.0949%" height="15" fill="rgb(239,221,27)" fg:x="12388" fg:w="12"/><text x="98.2176%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.03%)</title><rect x="98.0308%" y="149" width="0.0316%" height="15" fill="rgb(222,198,25)" fg:x="12396" fg:w="4"/><text x="98.2808%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (4 samples, 0.03%)</title><rect x="98.0308%" y="133" width="0.0316%" height="15" fill="rgb(211,99,13)" fg:x="12396" fg:w="4"/><text x="98.2808%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (2 samples, 0.02%)</title><rect x="98.0862%" y="149" width="0.0158%" height="15" fill="rgb(232,111,31)" fg:x="12403" fg:w="2"/><text x="98.3362%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.06%)</title><rect x="98.0625%" y="165" width="0.0633%" height="15" fill="rgb(245,82,37)" fg:x="12400" fg:w="8"/><text x="98.3125%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.02%)</title><rect x="98.1020%" y="149" width="0.0237%" height="15" fill="rgb(227,149,46)" fg:x="12405" fg:w="3"/><text x="98.3520%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.02%)</title><rect x="98.1257%" y="165" width="0.0237%" height="15" fill="rgb(218,36,50)" fg:x="12408" fg:w="3"/><text x="98.3757%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.02%)</title><rect x="98.1495%" y="165" width="0.0237%" height="15" fill="rgb(226,80,48)" fg:x="12411" fg:w="3"/><text x="98.3995%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (20 samples, 0.16%)</title><rect x="98.1811%" y="165" width="0.1582%" height="15" fill="rgb(238,224,15)" fg:x="12415" fg:w="20"/><text x="98.4311%" y="175.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::bot2::Bot2::search (12,250 samples, 96.88%)</title><rect x="1.4709%" y="181" width="96.8762%" height="15" fill="rgb(241,136,10)" fg:x="186" fg:w="12250"/><text x="1.7209%" y="191.50">App-c0aa541ba61d87cb`App::game_manager::bot2::Bot2::search</text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::board_state_numbers (2 samples, 0.02%)</title><rect x="98.3472%" y="181" width="0.0158%" height="15" fill="rgb(208,32,45)" fg:x="12436" fg:w="2"/><text x="98.5972%" y="191.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::attackers (3 samples, 0.02%)</title><rect x="98.3946%" y="165" width="0.0237%" height="15" fill="rgb(207,135,9)" fg:x="12442" fg:w="3"/><text x="98.6446%" y="175.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_king_moves (3 samples, 0.02%)</title><rect x="98.4183%" y="165" width="0.0237%" height="15" fill="rgb(206,86,44)" fg:x="12445" fg:w="3"/><text x="98.6683%" y="175.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::attackers (2 samples, 0.02%)</title><rect x="98.4263%" y="149" width="0.0158%" height="15" fill="rgb(245,177,15)" fg:x="12446" fg:w="2"/><text x="98.6763%" y="159.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_bishop_moves (2 samples, 0.02%)</title><rect x="98.4579%" y="149" width="0.0158%" height="15" fill="rgb(206,64,50)" fg:x="12450" fg:w="2"/><text x="98.7079%" y="159.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_knight_moves (4 samples, 0.03%)</title><rect x="98.4737%" y="149" width="0.0316%" height="15" fill="rgb(234,36,40)" fg:x="12452" fg:w="4"/><text x="98.7237%" y="159.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_pawn_moves (14 samples, 0.11%)</title><rect x="98.5053%" y="149" width="0.1107%" height="15" fill="rgb(213,64,8)" fg:x="12456" fg:w="14"/><text x="98.7553%" y="159.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_moves (24 samples, 0.19%)</title><rect x="98.4421%" y="165" width="0.1898%" height="15" fill="rgb(210,75,36)" fg:x="12448" fg:w="24"/><text x="98.6921%" y="175.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::gen_moves_legal (41 samples, 0.32%)</title><rect x="98.3630%" y="181" width="0.3242%" height="15" fill="rgb(229,88,21)" fg:x="12438" fg:w="41"/><text x="98.6130%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (7 samples, 0.06%)</title><rect x="98.6319%" y="165" width="0.0554%" height="15" fill="rgb(252,204,47)" fg:x="12472" fg:w="7"/><text x="98.8819%" y="175.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_king_moves (8 samples, 0.06%)</title><rect x="98.6872%" y="181" width="0.0633%" height="15" fill="rgb(208,77,27)" fg:x="12479" fg:w="8"/><text x="98.9372%" y="191.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::attackers (6 samples, 0.05%)</title><rect x="98.7030%" y="165" width="0.0474%" height="15" fill="rgb(221,76,26)" fg:x="12481" fg:w="6"/><text x="98.9530%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (6 samples, 0.05%)</title><rect x="98.9561%" y="165" width="0.0474%" height="15" fill="rgb(225,139,18)" fg:x="12513" fg:w="6"/><text x="99.2061%" y="175.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::perform_move (34 samples, 0.27%)</title><rect x="98.7505%" y="181" width="0.2689%" height="15" fill="rgb(230,137,11)" fg:x="12487" fg:w="34"/><text x="99.0005%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16$VARIANT$Haswell (2 samples, 0.02%)</title><rect x="99.0036%" y="165" width="0.0158%" height="15" fill="rgb(212,28,1)" fg:x="12519" fg:w="2"/><text x="99.2536%" y="175.50"></text></g><g><title>App-c0aa541ba61d87cb`core::slice::sort::insertion_sort_shift_left (17 samples, 0.13%)</title><rect x="99.0194%" y="181" width="0.1344%" height="15" fill="rgb(248,164,17)" fg:x="12521" fg:w="17"/><text x="99.2694%" y="191.50"></text></g><g><title>App-c0aa541ba61d87cb`core::slice::sort::merge_sort (5 samples, 0.04%)</title><rect x="99.1538%" y="181" width="0.0395%" height="15" fill="rgb(222,171,42)" fg:x="12538" fg:w="5"/><text x="99.4038%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (3 samples, 0.02%)</title><rect x="99.2171%" y="165" width="0.0237%" height="15" fill="rgb(243,84,45)" fg:x="12546" fg:w="3"/><text x="99.4671%" y="175.50"></text></g><g><title>App-c0aa541ba61d87cb`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.06%)</title><rect x="99.1934%" y="181" width="0.0554%" height="15" fill="rgb(252,49,23)" fg:x="12543" fg:w="7"/><text x="99.4434%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.02%)</title><rect x="99.2487%" y="181" width="0.0158%" height="15" fill="rgb(215,19,7)" fg:x="12550" fg:w="2"/><text x="99.4987%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.03%)</title><rect x="99.2645%" y="181" width="0.0316%" height="15" fill="rgb(238,81,41)" fg:x="12552" fg:w="4"/><text x="99.5145%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.02%)</title><rect x="99.2803%" y="165" width="0.0158%" height="15" fill="rgb(210,199,37)" fg:x="12554" fg:w="2"/><text x="99.5303%" y="175.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::bot2::Bot2::search (12,496 samples, 98.82%)</title><rect x="0.5931%" y="197" width="98.8217%" height="15" fill="rgb(244,192,49)" fg:x="75" fg:w="12496"/><text x="0.8431%" y="207.50">App-c0aa541ba61d87cb`App::game_manager::bot2::Bot2::search</text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (12 samples, 0.09%)</title><rect x="99.3199%" y="181" width="0.0949%" height="15" fill="rgb(226,211,11)" fg:x="12559" fg:w="12"/><text x="99.5699%" y="191.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_king_moves (3 samples, 0.02%)</title><rect x="99.4227%" y="181" width="0.0237%" height="15" fill="rgb(236,162,54)" fg:x="12572" fg:w="3"/><text x="99.6727%" y="191.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::attackers (2 samples, 0.02%)</title><rect x="99.4306%" y="165" width="0.0158%" height="15" fill="rgb(220,229,9)" fg:x="12573" fg:w="2"/><text x="99.6806%" y="175.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_moves (4 samples, 0.03%)</title><rect x="99.4464%" y="181" width="0.0316%" height="15" fill="rgb(250,87,22)" fg:x="12575" fg:w="4"/><text x="99.6964%" y="191.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_queen_moves (2 samples, 0.02%)</title><rect x="99.4622%" y="165" width="0.0158%" height="15" fill="rgb(239,43,17)" fg:x="12577" fg:w="2"/><text x="99.7122%" y="175.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::gen_moves_legal (8 samples, 0.06%)</title><rect x="99.4227%" y="197" width="0.0633%" height="15" fill="rgb(231,177,25)" fg:x="12572" fg:w="8"/><text x="99.6727%" y="207.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_king_moves (3 samples, 0.02%)</title><rect x="99.4860%" y="197" width="0.0237%" height="15" fill="rgb(219,179,1)" fg:x="12580" fg:w="3"/><text x="99.7360%" y="207.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::attackers (2 samples, 0.02%)</title><rect x="99.4939%" y="181" width="0.0158%" height="15" fill="rgb(238,219,53)" fg:x="12581" fg:w="2"/><text x="99.7439%" y="191.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::perform_move (13 samples, 0.10%)</title><rect x="99.5097%" y="197" width="0.1028%" height="15" fill="rgb(232,167,36)" fg:x="12583" fg:w="13"/><text x="99.7597%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16$VARIANT$Haswell (3 samples, 0.02%)</title><rect x="99.5888%" y="181" width="0.0237%" height="15" fill="rgb(244,19,51)" fg:x="12593" fg:w="3"/><text x="99.8388%" y="191.50"></text></g><g><title>App-c0aa541ba61d87cb`core::slice::sort::insertion_sort_shift_left (7 samples, 0.06%)</title><rect x="99.6283%" y="197" width="0.0554%" height="15" fill="rgb(224,6,22)" fg:x="12598" fg:w="7"/><text x="99.8783%" y="207.50"></text></g><g><title>App-c0aa541ba61d87cb`core::slice::sort::insertion_sort_shift_left (2 samples, 0.02%)</title><rect x="99.6916%" y="181" width="0.0158%" height="15" fill="rgb(224,145,5)" fg:x="12606" fg:w="2"/><text x="99.9416%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="99.7074%" y="181" width="0.0158%" height="15" fill="rgb(234,130,49)" fg:x="12608" fg:w="2"/><text x="99.9574%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="99.7074%" y="165" width="0.0158%" height="15" fill="rgb(254,6,2)" fg:x="12608" fg:w="2"/><text x="99.9574%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="99.7074%" y="149" width="0.0158%" height="15" fill="rgb(208,96,46)" fg:x="12608" fg:w="2"/><text x="99.9574%" y="159.50"></text></g><g><title>App-c0aa541ba61d87cb`core::slice::sort::merge_sort (6 samples, 0.05%)</title><rect x="99.6837%" y="197" width="0.0474%" height="15" fill="rgb(239,3,39)" fg:x="12605" fg:w="6"/><text x="99.9337%" y="207.50"></text></g><g><title>App-c0aa541ba61d87cb`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8 samples, 0.06%)</title><rect x="99.7311%" y="197" width="0.0633%" height="15" fill="rgb(233,210,1)" fg:x="12611" fg:w="8"/><text x="99.9811%" y="207.50"></text></g><g><title>App-c0aa541ba61d87cb`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.06%)</title><rect x="99.7390%" y="181" width="0.0554%" height="15" fill="rgb(244,137,37)" fg:x="12612" fg:w="7"/><text x="99.9890%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5 samples, 0.04%)</title><rect x="99.7548%" y="165" width="0.0395%" height="15" fill="rgb(240,136,2)" fg:x="12614" fg:w="5"/><text x="100.0048%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.02%)</title><rect x="99.8023%" y="197" width="0.0158%" height="15" fill="rgb(239,18,37)" fg:x="12620" fg:w="2"/><text x="100.0523%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.02%)</title><rect x="99.8023%" y="181" width="0.0158%" height="15" fill="rgb(218,185,22)" fg:x="12620" fg:w="2"/><text x="100.0523%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.02%)</title><rect x="99.8023%" y="165" width="0.0158%" height="15" fill="rgb(225,218,4)" fg:x="12620" fg:w="2"/><text x="100.0523%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.03%)</title><rect x="99.8181%" y="197" width="0.0316%" height="15" fill="rgb(230,182,32)" fg:x="12622" fg:w="4"/><text x="100.0681%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.02%)</title><rect x="99.8339%" y="181" width="0.0158%" height="15" fill="rgb(242,56,43)" fg:x="12624" fg:w="2"/><text x="100.0839%" y="191.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::bot2::Bot2::search (12,611 samples, 99.73%)</title><rect x="0.1423%" y="213" width="99.7311%" height="15" fill="rgb(233,99,24)" fg:x="18" fg:w="12611"/><text x="0.3923%" y="223.50">App-c0aa541ba61d87cb`App::game_manager::bot2::Bot2::search</text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (2 samples, 0.02%)</title><rect x="99.8577%" y="197" width="0.0158%" height="15" fill="rgb(234,209,42)" fg:x="12627" fg:w="2"/><text x="100.1077%" y="207.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::legal_moves (3 samples, 0.02%)</title><rect x="99.8893%" y="197" width="0.0237%" height="15" fill="rgb(227,7,12)" fg:x="12631" fg:w="3"/><text x="100.1393%" y="207.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::gen_moves_legal (6 samples, 0.05%)</title><rect x="99.8735%" y="213" width="0.0474%" height="15" fill="rgb(245,203,43)" fg:x="12629" fg:w="6"/><text x="100.1235%" y="223.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::state_bitboard::BitBoardState::perform_move (3 samples, 0.02%)</title><rect x="99.9288%" y="213" width="0.0237%" height="15" fill="rgb(238,205,33)" fg:x="12636" fg:w="3"/><text x="100.1788%" y="223.50"></text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::bot2::Bot2::search (12,636 samples, 99.93%)</title><rect x="0.0554%" y="229" width="99.9288%" height="15" fill="rgb(231,56,7)" fg:x="7" fg:w="12636"/><text x="0.3054%" y="239.50">App-c0aa541ba61d87cb`App::game_manager::bot2::Bot2::search</text></g><g><title>App-c0aa541ba61d87cb`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.02%)</title><rect x="99.9684%" y="213" width="0.0158%" height="15" fill="rgb(244,186,29)" fg:x="12641" fg:w="2"/><text x="100.2184%" y="223.50"></text></g><g><title>all (12,645 samples, 100%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(234,111,31)" fg:x="0" fg:w="12645"/><text x="0.2500%" y="479.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (12,644 samples, 99.99%)</title><rect x="0.0079%" y="453" width="99.9921%" height="15" fill="rgb(241,149,10)" fg:x="1" fg:w="12644"/><text x="0.2579%" y="463.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (12,644 samples, 99.99%)</title><rect x="0.0079%" y="437" width="99.9921%" height="15" fill="rgb(249,206,44)" fg:x="1" fg:w="12644"/><text x="0.2579%" y="447.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>App-c0aa541ba61d87cb`std::sys::unix::thread::Thread::new::thread_start (12,644 samples, 99.99%)</title><rect x="0.0079%" y="421" width="99.9921%" height="15" fill="rgb(251,153,30)" fg:x="1" fg:w="12644"/><text x="0.2579%" y="431.50">App-c0aa541ba61d87cb`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>App-c0aa541ba61d87cb`core::ops::function::FnOnce::call_once{{vtable.shim}} (12,644 samples, 99.99%)</title><rect x="0.0079%" y="405" width="99.9921%" height="15" fill="rgb(239,152,38)" fg:x="1" fg:w="12644"/><text x="0.2579%" y="415.50">App-c0aa541ba61d87cb`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>App-c0aa541ba61d87cb`std::sys_common::backtrace::__rust_begin_short_backtrace (12,644 samples, 99.99%)</title><rect x="0.0079%" y="389" width="99.9921%" height="15" fill="rgb(249,139,47)" fg:x="1" fg:w="12644"/><text x="0.2579%" y="399.50">App-c0aa541ba61d87cb`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>App-c0aa541ba61d87cb`test::run_test::_{{closure}} (12,644 samples, 99.99%)</title><rect x="0.0079%" y="373" width="99.9921%" height="15" fill="rgb(244,64,35)" fg:x="1" fg:w="12644"/><text x="0.2579%" y="383.50">App-c0aa541ba61d87cb`test::run_test::_{{closure}}</text></g><g><title>App-c0aa541ba61d87cb`test::__rust_begin_short_backtrace (12,644 samples, 99.99%)</title><rect x="0.0079%" y="357" width="99.9921%" height="15" fill="rgb(216,46,15)" fg:x="1" fg:w="12644"/><text x="0.2579%" y="367.50">App-c0aa541ba61d87cb`test::__rust_begin_short_backtrace</text></g><g><title>App-c0aa541ba61d87cb`core::ops::function::FnOnce::call_once (12,644 samples, 99.99%)</title><rect x="0.0079%" y="341" width="99.9921%" height="15" fill="rgb(250,74,19)" fg:x="1" fg:w="12644"/><text x="0.2579%" y="351.50">App-c0aa541ba61d87cb`core::ops::function::FnOnce::call_once</text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::bot2bench::tests::bot_bench (12,644 samples, 99.99%)</title><rect x="0.0079%" y="325" width="99.9921%" height="15" fill="rgb(249,42,33)" fg:x="1" fg:w="12644"/><text x="0.2579%" y="335.50">App-c0aa541ba61d87cb`App::game_manager::bot2bench::tests::bot_bench</text></g><g><title>App-c0aa541ba61d87cb`&lt;App::game_manager::bot2::Bot2 as App::game_manager::bot::Bot&gt;::get_move (12,644 samples, 99.99%)</title><rect x="0.0079%" y="309" width="99.9921%" height="15" fill="rgb(242,149,17)" fg:x="1" fg:w="12644"/><text x="0.2579%" y="319.50">App-c0aa541ba61d87cb`&lt;App::game_manager::bot2::Bot2 as App::game_manager::bot::Bot&gt;::get_move</text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::bot2::Bot2::search (12,644 samples, 99.99%)</title><rect x="0.0079%" y="293" width="99.9921%" height="15" fill="rgb(244,29,21)" fg:x="1" fg:w="12644"/><text x="0.2579%" y="303.50">App-c0aa541ba61d87cb`App::game_manager::bot2::Bot2::search</text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::bot2::Bot2::search (12,644 samples, 99.99%)</title><rect x="0.0079%" y="277" width="99.9921%" height="15" fill="rgb(220,130,37)" fg:x="1" fg:w="12644"/><text x="0.2579%" y="287.50">App-c0aa541ba61d87cb`App::game_manager::bot2::Bot2::search</text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::bot2::Bot2::search (12,644 samples, 99.99%)</title><rect x="0.0079%" y="261" width="99.9921%" height="15" fill="rgb(211,67,2)" fg:x="1" fg:w="12644"/><text x="0.2579%" y="271.50">App-c0aa541ba61d87cb`App::game_manager::bot2::Bot2::search</text></g><g><title>App-c0aa541ba61d87cb`App::game_manager::bot2::Bot2::search (12,644 samples, 99.99%)</title><rect x="0.0079%" y="245" width="99.9921%" height="15" fill="rgb(235,68,52)" fg:x="1" fg:w="12644"/><text x="0.2579%" y="255.50">App-c0aa541ba61d87cb`App::game_manager::bot2::Bot2::search</text></g></svg></svg>